import os
import configparser
from shutil import copyfile
from ttkbootstrap.dialogs.dialogs import Messagebox


class SettingsController:
    @staticmethod
    def load_or_create_config_file(app_root_dir, required_config_file_version):
        """Loads and returns user settings. If the file
        APP_USER_DATA_DIR do not exist, creates the necessary directory
        structure and copies a template file with the default settings
        to the location.
        """
        settings = configparser.ConfigParser()

        APP_DEFAULT_USER_DATA_FILE = os.path.join(app_root_dir, 'assets', 'default.ini')
        try:
            USER_HOME_DIR = os.path.expanduser("~")
            APP_USER_DATA_DIR = os.path.join(USER_HOME_DIR, '.config', 'time-journal')
            APP_USER_DATA_FILE = os.path.join(APP_USER_DATA_DIR, 'config')
        except:
            APP_USER_DATA_FILE = os.path.join(app_root_dir, 'assets', 'config')

        print(f"Loading config file at: {APP_USER_DATA_FILE}")
        if not os.path.isfile(APP_USER_DATA_FILE):
            print(
                f"Config file not found. Copying {APP_DEFAULT_USER_DATA_FILE}..."
            )
            os.makedirs(APP_USER_DATA_DIR, exist_ok=True)
            copyfile(APP_DEFAULT_USER_DATA_FILE, APP_USER_DATA_FILE)

        settings.read(APP_USER_DATA_FILE)
        SettingsController.compare_config_file_versions(settings, required_config_file_version)
        return settings

    @staticmethod
    def compare_config_file_versions(settings, required_config_file_version):
        """Compares the config file version of the config file on the
        executing machine and the config file template

        Parameters
        ----------
        settings
            A config file dictionary, generated by configparser.read()
            method.
        """
        v_loaded = settings["DEFAULT"].getint("version")

        if v_loaded != required_config_file_version:
            # Backup the old config file
            backup = f"{APP_USER_DATA_FILE}-{v_loaded}"
            copyfile(APP_USER_DATA_FILE, backup)
            # Copy the new config file
            copyfile(APP_DEFAULT_USER_DATA_FILE, APP_USER_DATA_FILE)
            # Notify the user
            play_sound = settings["notifications.sound"].getboolean(
                "info_messages"
            )
            Messagebox.show_info(
                message=f"The user settings have been updated. To ensure a working program, the new configuration file will be loaded. Your old configuration file has been backuped in {backup}",
                title="Config File Update",
                alert=play_sound,
            )
            settings.read(APP_USER_DATA_FILE)
